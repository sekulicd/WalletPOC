syntax = "proto3";
option go_package = "github.com/tdex-network/tdex-protobuf/generated/go/wallet";

/**
 * Service for Liquidity Providers to manage funds via walle RPC
 */
service Wallet {
  /*
  GenSeed is the first method that should be used to instantiate a new tdexd
  instance. This method allows a caller to generate a new HD Wallet.
  Once the seed is obtained and verified by the user, the InitWallet
  method should be used to commit the newly generated seed, and create the
  wallet.
  */
  rpc GenSeed(GenSeedRequest) returns (GenSeedReply);

  /*
  InitWallet is used when tdexd is starting up for the first time to fully
  initialize the daemon and its internal wallet. At the very least a mnemonic
  and a wallet password must be provided. This will be used to encrypt sensitive
  material on disk. Alternatively, this can be used along with the GenSeed RPC
  to obtain a seed, then present it to the user. Once it has been verified by
  the user, the seed can be fed into this RPC in order to commit the new wallet.
  */
  rpc InitWallet(InitWalletRequest) returns (InitWalletReply);

  /*
  UnlockWallet is used at startup of tdexd to provide a password to unlock
  the wallet database.
  */
  rpc UnlockWallet(UnlockWalletRequest) returns (UnlockWalletReply);

  /*
  ChangePassword changes the password of the encrypted wallet. This will
  automatically unlock the wallet database if successful.
  */
  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordReply);

  /*
  WalletAddress returns a Liquid confidential p2wpkh address (BLECH32)
  */
  rpc WalletAddress(WalletAddressRequest) returns (WalletAddressReply);

  /*
  WalletBalance returns total unspent outputs(confirmed and unconfirmed), all
  confirmed unspent outputs and all unconfirmed unspent outputs under control
  of the wallet.
  */
  rpc WalletBalance(WalletBalanceRequest) returns (WalletBalanceReply);

  /*SendToMany sends funds to many outputs */
  rpc SendToMany(SendToManyRequest) returns (SendToManyReply);
}

message GenSeedRequest {}
message GenSeedReply {
  /*
  seed_mnemonic is a 24-word mnemonic that encodes a prior seed obtained
  by the user. This field is optional, as if not provided, then the daemon will
  generate a new cipher seed for the user. Otherwise, then the daemon will
  attempt to recover the wallet state linked to this cipher seed.
  */
  repeated string seed_mnemonic = 1;
}

message InitWalletRequest {
  /*
  wallet_password is the passphrase that should be used to encrypt the
  wallet. This MUST be at least 8 chars in length. After creation, this
  password is required to unlock the daemon.
  */
  bytes wallet_password = 1;

  /*
  seed_mnemonic is a 24-word mnemonic that encodes a prior seed obtained by the
  user. This MUST be a generated by the GenSeed method
  */
  repeated string seed_mnemonic = 2;
}
message InitWalletReply {}

message UnlockWalletRequest {
  /*
  wallet_password should be the current valid passphrase for the daemon. This
  will be required to decrypt on-disk material that the daemon requires to
  function properly.
  */
  bytes wallet_password = 1;
}
message UnlockWalletReply {}

message ChangePasswordRequest {
  /*
  current_password should be the current valid passphrase used to unlock the
  daemon.
  */
  bytes current_password = 1;

  /*
  new_password should be the new passphrase that will be needed to unlock the
  daemon.
  */
  bytes new_password = 2;
}
message ChangePasswordReply {}

message SendToManyRequest {
  /*
  A slice of the outputs that should be created in the transaction produced.
  */
  repeated TxOut outputs = 1;
  /*
   The number of millisatoshis per byte that should be used when crafting
   this transaction.
   */
  int64 millisat_per_byte = 2;

  // Optional: if true the transaction will be pushed to the network
  bool push = 3;
}

message SendToManyReply {
  /*
    The serialized transaction sent out on the network.
    */
  bytes raw_tx = 1;
}

message WalletAddressRequest {}
message WalletAddressReply {
  // The confidential address encoded using a blech32 format.
  string address = 1;
  // The blinding private key for the given address encoded in hex format
  string blinding = 2;
}

message BalanceInfo {
  // The balance of the wallet
  uint64 total_balance = 1;

  // The confirmed balance of a wallet(with >= 1 confirmations)
  uint64 confirmed_balance = 2;

  // The unconfirmed balance of a wallet(with 0 confirmations)
  uint64 unconfirmed_balance = 3;
}

message WalletBalanceRequest {}
message WalletBalanceReply {
  // The balance info (total, confirmed, unconfirmed) of the wallet grouped by
  // asset
  map<string, BalanceInfo> balance = 1;
}

message TxOut {
  // The asset being spent
  string asset = 1;
  // The value of the output being spent.
  int64 value = 2;
  // The confidential address of the output being spent.
  string address = 3;
}
